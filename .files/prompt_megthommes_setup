# Personalized prompt

# Based on:
# Purity
# by Kevin Lanni
# https://github.com/therealklanni/purity
# MIT License
# and
# Purification
# by Matthieu Cneude
# https://github.com/Phantas0s/purification

# git:
# %b => current branch
# %a => current action (rebase/merge)
# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# turns seconds into human readable time
# 165392 => 1d 21h 56m 32s
prompt_human_time() {
    local tmp=$1
    local days=$(( tmp / 60 / 60 / 24 ))
    local hours=$(( tmp / 60 / 60 % 24 ))
    local minutes=$(( tmp / 60 % 60 ))
    local seconds=$(( tmp % 60 ))
    echo -n "⌚︎ "
    (( $days > 0 )) && echo -n "${days}d "
    (( $hours > 0 )) && echo -n "${hours}h "
    (( $minutes > 0 )) && echo -n "${minutes}m "
    echo "${seconds}s"
}

# displays the exec time of the last command if set threshold was exceeded
prompt_cmd_exec_time() {
    local stop=$EPOCHSECONDS
    local start=${cmd_timestamp:-$stop}
    integer elapsed=$stop-$start
    (($elapsed > ${megthommes_CMD_MAX_EXEC_TIME:=5})) && prompt_human_time $elapsed
}

# string length ignoring ansi escapes
prompt_string_length() {
    echo ${#${(S%%)1//(\%([KF1]|)\{*\}|\%[Bbkf])}}
}

# display git branch
prompt_git_branch() {
    autoload -Uz vcs_info
    precmd_vcs_info() { vcs_info }
    precmd_functions+=( precmd_vcs_info )
    setopt prompt_subst
    zstyle ':vcs_info:git:*' formats '%b'
}

# display git info
prompt_git_info() {
    if [ ! -z "$vcs_info_msg_0_" ]; then
        local branch_color="{yellow}"
        if [ "$vcs_info_msg_0_" = "main" ]; then
            branch_color="{red}"
        fi
        echo "$ZSH_THEME_GIT_PROMPT_PREFIX%B%F${branch_color}$vcs_info_msg_0_%f%b$ZSH_THEME_GIT_PROMPT_SUFFIX"
    fi
}

# display git status
prompt_git_status() {
  local INDEX STATUS

  INDEX=$(command git status --porcelain -b 2> /dev/null)

  STATUS=""

  if $(echo "$INDEX" | command grep -E '^\?\? ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^A  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  elif $(echo "$INDEX" | grep '^M  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif $(echo "$INDEX" | grep '^AM ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif $(echo "$INDEX" | grep '^ T ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^R  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  elif $(echo "$INDEX" | grep '^D  ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  elif $(echo "$INDEX" | grep '^AD ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  fi

  if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then
    STATUS="$ZSH_THEME_GIT_PROMPT_STASHED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS"
  fi

  if $(echo "$INDEX" | grep '^## [^ ]\+ .*ahead' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_AHEAD$STATUS"
  fi

  if $(echo "$INDEX" | grep '^## [^ ]\+ .*behind' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_BEHIND$STATUS"
  fi

  if $(echo "$INDEX" | grep '^## [^ ]\+ .*diverged' &> /dev/null); then
    STATUS="$ZSH_THEME_GIT_PROMPT_DIVERGED$STATUS"
  fi

  if [[ ! -z "$STATUS" ]]; then
    echo " [ $STATUS]"
  fi
}

prompt_precmd() {
    # shows the full path in the title
    print -Pn '\e]0;%~\a'

    local prompt_megthommes_preprompt="%c$(prompt_git_branch) $(prompt_git_status)"

    # only print execution time if it's non-empty
    local exec_time=$(prompt_cmd_exec_time)
    [[ -n "$exec_time" ]] && print -P '%F{yellow}${exec_time}%f'

    # check async if there is anything to pull
    (( ${PROMPT_GIT_PULL:-1} )) && {
        # check if we're in a git repo
        command git rev-parse --is-inside-work-tree &>/dev/null &&
        # check check if there is anything to pull
        command git fetch &>/dev/null &&
        # check if there is an upstream configured for this branch
        command git rev-parse --abbrev-ref @'{u}' &>/dev/null &&
        (( $(command git rev-list --right-only --count HEAD...@'{u}' 2>/dev/null) > 0 )) &&
        # some crazy ansi magic to inject the symbol into the previous line
        print -Pn "\e7\e[0G\e[`prompt_string_length $prompt_megthommes_preprompt`C%F{cyan}⇣%f\e8"
    } &!

    # reset value since `preexec` isn't always triggered
    unset cmd_timestamp
}

prompt_preexec() {
    cmd_timestamp=$EPOCHSECONDS

    # shows the current dir and executed command in the title when a process is active
    print -Pn "\e]0;"
    echo -nE "$PWD:t: $2"
    print -Pn "\a"
}

prompt_megthommes_setup() {
    # prevent % showing up if output doesn't end with a newline
    export PROMPT_EOL_MARK=''

    # set prompt options
    prompt_opts=(cr subst percent)

    # load zsh modules and functions
    zmodload zsh/datetime # datetime module
    autoload -Uz add-zsh-hook # add-zsh-hook function
    autoload -Uz vcs_info # vcs_info function

    # add hooks
    add-zsh-hook precmd prompt_precmd # pre-prompt
    add-zsh-hook preexec prompt_preexec # pre-execution

    # show username@host if logged in through SSH
    [[ "$SSH_CONNECTION" != '' ]] && prompt_megthommes_username='%n@%m '

    # set git prompt options
    ZSH_THEME_GIT_PROMPT_PREFIX=" %F"
    ZSH_THEME_GIT_PROMPT_SUFFIX="%b"
    ZSH_THEME_GIT_PROMPT_DIRTY=""
    ZSH_THEME_GIT_PROMPT_CLEAN=""

    ZSH_THEME_GIT_PROMPT_ADDED="%F{green}✓%f "
    ZSH_THEME_GIT_PROMPT_MODIFIED="%F{orange}✶%f "
    ZSH_THEME_GIT_PROMPT_DELETED="%F{red}✗%f "
    ZSH_THEME_GIT_PROMPT_RENAMED="%F{cyan}↻%f "
    ZSH_THEME_GIT_PROMPT_UNMERGED="%F{blue}═%f "
    ZSH_THEME_GIT_PROMPT_UNTRACKED="%F{white}✩%f "
    ZSH_THEME_GIT_PROMPT_STASHED="%B%F{purple}+%f%b "
    ZSH_THEME_GIT_PROMPT_BEHIND="%B%F{magenta}←%f%b "
    ZSH_THEME_GIT_PROMPT_AHEAD="%B%F{yellow}→%f%b "

    # define prompt
    prompt_git_branch
    PROMPT='%F{white}%c$(prompt_git_info) %(?.%B%F{green}.%B%F{red})❯%f%b '
    RPROMPT=' $(prompt_git_status)'
}

prompt_megthommes_setup "$@"
